// Generated by CoffeeScript 1.10.0
var $err_sign, $everything_ok, $final_patient_state_later, $measurement_ok, PESEL_validator, StrictValidation, arrivalDate, birthDate_validator, check_status, date_from_PESEL, date_to_timestamp, datetime_to_timestamp, fix_measurements, get_month_from_timestamp, get_year_from_timestamp, map_examinations, route_uri, sex_validator, strokeInThePastValid, text_to_err, text_to_warn, timestamp_to_date, timestamp_to_datetime,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

date_to_timestamp = function($date, $separator) {
  if ($separator == null) {
    $separator = '-';
  }
  if ($date === '') {
    return '';
  }
  return moment.tz($date, $timezone_used).valueOf();
};

datetime_to_timestamp = function($date, $separator) {
  if ($separator == null) {
    $separator = '-';
  }
  if ($date === '') {
    return '';
  }
  return moment.tz($date, $timezone_used).valueOf();
};

timestamp_to_date = function($date) {
  return moment.tz($date, $timezone_used).format("YYYY-MM-DD");
};

timestamp_to_datetime = function($date) {
  return moment.tz($date, $timezone_used).format("YYYY-MM-DD HH:mm");
};

get_year_from_timestamp = function($timestamp) {
  return moment.tz($timestamp, $timezone_used).year();
};

get_month_from_timestamp = function($timestamp) {
  return moment.tz($timestamp, $timezone_used).month();
};

$err_sign = '<i style="display: block; margin-right: 3px; margin-top: 1px;" class="pull-left fa fa-warning err-info"></i>';

text_to_err = function($val) {
  return '<p class="text-danger error-text">' + $err_sign + $val + '</p>';
};

text_to_warn = function($val) {
  return '<p class="text-warning error-text">' + $err_sign + $val + '</p>';
};

$final_patient_state_later = '<p class="text-success" style="display: inline-block; margin-bottom: 0;">Informacja o przeżyciu do uzupełnienia później</p>';

$everything_ok = '<p class="text-success" style="display: inline-block; margin-bottom: 0;">Dane kompletne</p>';

$measurement_ok = '<p class="text-success" style="display: inline-block; margin-bottom: 0;">OK</p>';

date_from_PESEL = function($tmp) {
  var $date, $day, $month, $year;
  $year = 1900 + parseInt($tmp[0]) * 10 + parseInt($tmp[1]);
  if (parseInt($tmp[2]) >= 2 || parseInt($tmp[2]) <= 7) {
    $year += Math.floor(parseInt($tmp[2]) / 2) * 100;
  }
  if (parseInt($tmp[2]) >= 8) {
    $year -= 100;
  }
  $month = (parseInt($tmp[2]) % 2) * 10 + parseInt($tmp[3]);
  if ($month < 10) {
    $month = '0' + $month.toString();
  }
  $day = parseInt($tmp[4]) * 10 + parseInt($tmp[5]);
  if ($day < 10) {
    $day = '0' + $day.toString();
  }
  $date = $year.toString() + '-' + $month + '-' + $day;
  if (!moment($date, 'YYYY-MM-DD').isValid()) {
    return false;
  }
  return $date;
};

PESEL_validator = function($value) {
  var $checksum_ok, $date, $n, $sum, $tmp, $weights, i;
  if (($value == null) || $value === '') {
    return {
      valid: false,
      message: 'Pole jest obowiązkowe'
    };
  }
  if ($value.length < 11) {
    return {
      valid: false,
      message: 'Wprowadzony numer PESEL jest zbyt krótki'
    };
  }
  if ($value.length > 11) {
    return {
      valid: false,
      message: 'Wartość niepoprawna'
    };
  }
  if (!Lazy($value).every(function(v) {
    return v >= '0' && v <= '9';
  })) {
    return {
      valid: false,
      message: 'Wartość niepoprawna'
    };
  }
  $tmp = $value.split('');
  $date = date_from_PESEL($tmp);
  if (!$date) {
    return {
      valid: false,
      message: 'Błędna data urodzenia'
    };
  }
  $weights = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3, 1];
  $sum = 0;
  for ($n = i = 0; i <= 10; $n = ++i) {
    $sum += $tmp[$n] * $weights[$n];
  }
  $checksum_ok = $sum % 10 === 0;
  if (!$checksum_ok) {
    return {
      valid: false,
      message: 'Błędna suma kontrolna'
    };
  }
  if (!moment.tz($date, $timezone_used).isBefore()) {
    return {
      valid: false,
      message: 'Data urodzenia z przyszłości'
    };
  }
  return {
    valid: true
  };
};

birthDate_validator = function($value, $identityNumber) {
  var $date;
  if ($value == null) {
    return {
      valid: false,
      message: 'Pole jest obowiązkowe'
    };
  }
  $date = moment.tz($value, $timezone_used);
  if (!$date.isBefore()) {
    return {
      valid: false,
      message: 'Wprowadzono datę z przyszłości'
    };
  }
  if (PESEL_validator($identityNumber).valid) {
    if (!$date.isSame(moment.tz(date_from_PESEL($identityNumber.split('')), $timezone_used))) {
      return {
        valid: false,
        message: 'Data urodzenia nie zgadza się z numerem PESEL'
      };
    }
  }
  return {
    valid: true
  };
};

sex_validator = function($value, $identityNumber) {
  var $correctSex;
  if (PESEL_validator($identityNumber).valid) {
    $correctSex = parseInt($identityNumber.split('')[9]) % 2 === 1 ? 'MALE' : 'FEMALE';
    return $correctSex === $value;
  }
  return true;
};

route_uri = function($href) {
  switch ($href) {
    case '#new-measurements':
    case '#all-measurements':
      return 'measurements/webapi/measurements';
    case '#to-fill':
    case '#all-examinations':
    case '#phones':
      return 'patients/webapi/examinations';
  }
  return $href.substr(1);
};

check_status = function(resp) {
  var error, ref;
  if ((200 <= (ref = resp.status) && ref < 300)) {
    return resp;
  } else {
    error = new Error(resp.statusText);
    error.response = resp;
    throw error;
  }
};

arrivalDate = function($v) {
  var $tmp;
  if (($v.interview != null) && ($v.interview.arrivalDate != null)) {
    $tmp = parseInt($v.interview.arrivalDate);
    if (!isNaN($tmp)) {
      return $tmp;
    }
  } else {
    if (($v.measurements == null) || $v.measurements.length === 0) {
      return moment().valueOf();
    }
    $tmp = Lazy($v.measurements).filter(function($v) {
      return typeof $v === "object";
    }).sortBy('actualDate').first();
    if ($tmp == null) {
      return moment().valueOf();
    }
    $tmp = parseInt($tmp.actualDate);
    if (!isNaN($tmp)) {
      return $tmp;
    }
  }
  return moment().valueOf();
};

strokeInThePastValid = function($arrivalDate, $strokeInThePast, $pastStrokeYear, $pastStrokeMonth) {
  var $curr_year, $stroke_date, $year;
  if ($strokeInThePast === 'YES') {
    $year = parseInt($pastStrokeYear);
    $curr_year = get_year_from_timestamp($arrivalDate);
    if (($pastStrokeYear == null) || $pastStrokeYear === '' || $year > $curr_year) {
      return false;
    }
    $stroke_date = moment({
      year: $year,
      month: 0,
      day: 1
    });
    if ($year >= $curr_year - 1) {
      if ($pastStrokeMonth == null) {
        $pastStrokeMonth = '1';
      }
      if ($pastStrokeMonth < 1 || $pastStrokeMonth > 12) {
        return false;
      }
      $stroke_date = moment({
        year: $year,
        month: parseInt($pastStrokeMonth) - 1,
        day: 1
      });
    }
    return $stroke_date.valueOf() <= $arrivalDate;
  }
  return true;
};

StrictValidation = (function() {
  var drugsValid;

  function StrictValidation(interview) {
    this.interview = interview;
    null;
  }

  drugsValid = function($chosen, $other) {
    if (($chosen == null) || $chosen.length === 0) {
      return false;
    }
    if (indexOf.call($chosen, 'OTHER') >= 0 && ($other == null)) {
      return false;
    }
    return true;
  };

  StrictValidation.prototype.setInterview = function($interview) {
    return this.interview = $interview;
  };

  StrictValidation.prototype.firstMeasurement = function() {
    return null;
  };

  StrictValidation.prototype.thirdSection = function($arrivalDate) {
    if (this.interview == null) {
      return false;
    }
    if (this.interview.strokeInThePast == null) {
      return false;
    }
    if (!strokeInThePastValid($arrivalDate, this.interview['strokeInThePast'], this.interview['pastStrokeYear'], this.interview['pastStrokeMonth'])) {
      return false;
    }
    if (this.interview['diabetes'] === 'YES' && !((this.interview['glucoseLevelDay1'] != null) && (this.interview['glucoseLevelDay5to7'] != null))) {
      return false;
    }
    if (this.interview['ischemicHeartDisease'] === 'YES' && (this.interview['ccsClass'] == null)) {
      return false;
    }
    if (this.interview['atrialFibrillation'] === 'YES' && (this.interview['afTreatedWithAnticoagulant'] == null)) {
      return false;
    }
    if (this.interview['cigarettes'] === 'ACTIVE_SMOKING' && (this.interview['cigarettesPacksPerYear'] == null)) {
      return false;
    }
    if (this.interview['heartFailure'] === 'YES' && (this.interview['nyhaClass'] == null)) {
      return false;
    }
    return true;
  };

  StrictValidation.prototype.fifthSection = function() {
    return drugsValid(this.interview['drugsOnHospitalisation'], this.interview['otherDrugsOnHospitalisation']);
  };

  StrictValidation.prototype.sixthSection = function() {
    return drugsValid(this.interview['drugsOnDischarge'], this.interview['otherDrugsOnDischarge']);
  };

  return StrictValidation;

})();

map_examinations = function($data) {
  return $data.map(function($v) {
    var $date, $died_in_hospital, $interview_valid, $is_half_year, $notes, $problem, $required_interview, $required_user, $second_end, $second_ok, $second_start, $should_be_filled_later, $state_valid, $time_since_arrival, $tmp, $to_fill_later, $uwagi, $validator, check_interview;
    $v.arrivalDate = arrivalDate($v);
    $uwagi = [];
    $notes = [];
    $to_fill_later = 'ankieta do uzupełnienia później';
    $should_be_filled_later = false;
    $date = Lazy($v.measurements).sortBy('actualDate').first();
    $date = $date != null ? $date.actualDate : '';
    if (($v.interview == null) || $v.interview.finalPatientsState !== 'DIED_IN_HOSPITAL') {
      $problem = false;
      if ($v.measurements == null) {
        $uwagi.push('nie przypisano pomiarów');
        $problem = true;
      } else if ($v.arrivalDate + moment.duration(2, 'days').asMilliseconds() < parseInt($date) || $v.arrivalDate > parseInt($date)) {
        $uwagi.push('pierwszy pomiar wykonano w złym czasie');
        $problem = true;
      }
      $second_ok = false;
      if ($v.measurements != null) {
        $second_start = $v.arrivalDate + moment.duration(4, 'days').asMilliseconds();
        $second_end = $v.arrivalDate + moment.duration(8, 'days').asMilliseconds();
        $second_ok = Lazy($v.measurements).reduce(function($old, $m) {
          var $tmp;
          $tmp = parseInt($m.actualDate);
          return ($tmp >= $second_start && $tmp <= $second_end) || $old;
        }, false);
      }
      if (!$second_ok && ($v.measurements != null) && $v.measurements.length >= 2) {
        $uwagi.push('drugi pomiar wykonano w złym czasie');
        $problem = true;
      } else if (!$second_ok && $v.arrivalDate + moment.duration(4, 'days').asMilliseconds() < moment().valueOf()) {
        $uwagi.push('brak drugiego pomiaru');
        $problem = true;
      }
      if (!$problem && (($v.measurements == null) || $v.measurements.length < 2)) {
        $notes.push('pomiar do uzupełnienia później');
      }
    }
    $interview_valid = $v.interview != null;
    $time_since_arrival = moment.duration(moment().valueOf() - $v.arrivalDate, 'ms').asDays();
    $died_in_hospital = ($v.interview != null) && $v.interview.finalPatientsState === 'DIED_IN_HOSPITAL';
    check_interview = function($required) {
      return Lazy($required).reduce((function($old, $el) {
        return $old && ($v.interview != null) && ($v['interview'][$el] != null) && $v['interview'][$el] !== '';
      }), true);
    };
    if ($interview_valid) {
      $required_user = ['surname', 'firstName', 'identityNumber', 'birthDate', 'doctor'];
      $required_interview = ['sex', 'weight', 'weightAccuracy', 'height', 'arrivalDate', 'strokeDate', 'phoneNumber', 'education', 'employment'];
      $interview_valid = Lazy($required_user).reduce((function($old, $el) {
        return $old && ($v[$el] != null) && $v[$el] !== '';
      }), true) && check_interview($required_interview) && PESEL_validator($v.identityNumber).valid && birthDate_validator($v.birthDate, $v.identityNumber).valid && sex_validator($v.interview.sex, $v.identityNumber);
    }
    $required_interview = ['rankinPoints', 'nihssPoints', 'symptomLesionLocation', 'screeningTypeDate', 'strokeType', 'screeningLesionLocation', 'transcranialUltrasonographyResult', 'headArteriesUltrasonographyResult'];
    $tmp = check_interview($required_interview);
    if ($interview_valid && !$tmp) {
      if ($time_since_arrival >= 1 || $died_in_hospital) {
        $interview_valid = $tmp;
      } else if (!$should_be_filled_later) {
        $should_be_filled_later = true;
      }
    }
    $required_interview = ['strokeInThePast', 'hypertension', 'kidneysDiseases', 'diabetes', 'ischemicHeartDisease', 'lipidsDisorders', 'atrialFibrillation', 'cigarettes', 'neckArteriesDiseases', 'heartFailure', 'veinsThrombosis', 'hormoneTherapy', 'familyDiseasesStroke', 'familyDiseasesHeartFailure', 'familyDiseasesDiabetes', 'familyDiseasesIschemicHeart', 'familyDiseasesHypertension', 'drugsBeforeStroke', 'drugsOnHospitalisation'];
    $tmp = check_interview($required_interview);
    $validator = new StrictValidation($v.interview);
    $tmp = $tmp && $validator.thirdSection($v.arrivalDate) && $validator.fifthSection();
    if ($interview_valid && !$tmp) {
      if ($time_since_arrival >= 7 || $died_in_hospital) {
        $interview_valid = $tmp;
      } else if (!$should_be_filled_later) {
        $should_be_filled_later = true;
      }
    }
    $required_interview = ['drugsOnDischarge'];
    $tmp = check_interview($required_interview) && $validator.sixthSection();
    if ($interview_valid && !$tmp) {
      if ($time_since_arrival >= 7 && !$died_in_hospital) {
        $interview_valid = $tmp;
      } else if (!$should_be_filled_later && !$died_in_hospital) {
        $should_be_filled_later = true;
      }
    }
    if ($should_be_filled_later) {
      $notes.push($to_fill_later);
    } else if (!$interview_valid) {
      $uwagi.push('niepełna ankieta');
    }
    $is_half_year = moment.duration(moment().valueOf() - $v.arrivalDate, 'ms').asMonths() >= 6;
    $state_valid = true;
    if ($died_in_hospital) {
      if ($v.interview.dateOfDeath == null) {
        $state_valid = false;
      } else {
        $state_valid = !moment($v.interview.dateOfDeath).isBefore($v.arrivalDate) && !moment($v.interview.dateOfDeath).isAfter(moment());
      }
    } else if ($is_half_year) {
      if (($v.interview == null) || ($v.interview.finalPatientsState == null)) {
        $state_valid = false;
      } else if (($v.interview != null) && $v.interview.finalPatientsState === 'DIED_IN_6_MONTHS' && ($v.interview.approximateDateOfDeath != null) && $v.interview.approximateDateOfDeath.match(/\d{1,2}\-\d{1,2}\-\d{1,2}/) !== null) {
        $state_valid = !moment($v.interview.approximateDateOfDeath).isBefore($v.arrivalDate) && !moment($v.interview.approximateDateOfDeath).isAfter(moment());
      }
    }
    $v.qualifiesForPhone = false;
    if (($died_in_hospital || $is_half_year) && !$state_valid) {
      $uwagi.push('brak informacji o przeżyciu');
      $v.qualifiesForPhone = true;
    }
    $v.notes = Lazy($uwagi).reduce((function($uwagi, $curr) {
      return $uwagi += text_to_err($curr);
    }), '');
    $v.notes += Lazy($notes).reduce((function($notes, $curr) {
      return $notes += text_to_warn($curr);
    }), '');
    $v.to_complete = true;
    if ($uwagi.length === 0 && $notes.length === 0) {
      $v.to_complete = false;
      if ($v.interview.finalPatientState == null) {
        $v.notes = $final_patient_state_later;
      } else {
        $v.notes = $everything_ok;
      }
    }
    return $v;
  });
};

fix_measurements = function($measurements) {
  var $patients;
  $patients = [];
  return $measurements.sortBy(function($v) {
    return typeof $v !== 'object';
  }).map(function($v) {
    if (typeof $v === 'object' && ($v.patient != null)) {
      $patients.push($v.patient);
    } else if (typeof $v !== 'object') {
      Lazy($patients).each(function($user) {
        var $tmp;
        $tmp = Lazy($user.measurements).find(function($m) {
          return $m.id === $v;
        });
        if ($tmp != null) {
          $v = $tmp;
          $v.patient = $user;
          return false;
        }
      });
    }
    return $v;
  });
};

//# sourceMappingURL=common.js.map
