// Generated by CoffeeScript 1.10.0
var $auth_data, $curr_ajax_request, $curr_tab, $datepicker_settings, $event_handlers, $feedbackIcons, $horizontal_form_row, $interview_arrival_date, $last_activity, $logout_after, $logout_info, $measurements_refresh_queued, $new_measurements_opened, $other_user_logout, $prev_tab, $since, $timezone_used, $updaters_refresh_after, $username, add_event, add_form_after_checkbox, add_form_after_multi, ajax_request, auto_logout, comet, examinations_page_handler, examinations_updater, get_username, interview_page_handler, logout, measurements_page_handler, measurements_updater, observation_page_handler, phones_filter, read_data, read_json, read_with_status, show_login_error, show_measurement_dialog, show_overlay, sort_examinations, typeIsArray, write_data, write_with_status,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

$logout_after = 30;

$updaters_refresh_after = 30;

$curr_tab = $prev_tab = null;

$feedbackIcons = {
  valid: 'void',
  invalid: 'fa fa-exclamation-circle fa-lg icon-fix',
  validating: 'fa fa-refresh fa-lg icon-fix'
};

$curr_ajax_request = null;

$horizontal_form_row = '<div class="fluid-row"> <div class="col-xs-12"> <div class="form-group"> <label class="col-sm-2 control-label dependent-label"></label> <div class="col-xs-5"> {label_content} </div> </div> </div> </div>';

$since = {
  '#new-measurements': 0,
  '#all-measurements': 0,
  '#all-examinations': 0,
  '#to-fill': 0,
  '#phones': 0
};

$auth_data = '';

$last_activity = 0;

$other_user_logout = false;

$username = null;

$new_measurements_opened = false;

$datepicker_settings = {
  language: 'pl',
  pickTime: false,
  maxDate: new Date()
};

$timezone_used = 'Europe/Warsaw';

String.prototype.capitalize = function() {
  return this.replace(/^./, function(match) {
    return match.toUpperCase();
  });
};

show_overlay = function() {
  if (!$('#ajaxOverlay').is(':visible')) {
    return $('#ajaxOverlay').fadeIn(100);
  }
};

read_with_status = function($url) {
  var $response;
  $response = {};
  $.ajax({
    type: 'GET',
    url: $url,
    async: false,
    complete: function($data) {
      if ($data.getResponseHeader('client-uuid') != null) {
        $.ajaxSetup({
          headers: {
            "client-uuid": $data.getResponseHeader('client-uuid')
          }
        });
      }
      if ($auth_data !== '' && $data.status === 503) {
        $other_user_logout = true;
      }
      return $response = {
        text: $data.responseText,
        status: $data.status
      };
    }
  });
  $('#ajaxOverlay').fadeOut(100);
  return $response;
};

read_data = function($url) {
  return read_with_status($url).text;
};

read_json = function($url) {
  return $.parseJSON(read_data($url));
};

write_with_status = function($type, $url, $data) {
  var $response, $status;
  $response = null;
  $status = 200;
  $.ajax({
    type: $type,
    url: $url,
    contentType: 'application/json; charset=utf-8',
    data: $data,
    async: false,
    complete: function($res) {
      var error;
      if ($auth_data !== '' && $res.status === 503) {
        $other_user_logout = true;
      }
      $status = $res.status;
      try {
        if ($res.responseText.length) {
          return $response = $.parseJSON($res.responseText);
        }
      } catch (error) {
        return $response = '';
      }
    }
  });
  return {
    'content': $response,
    'status': $status
  };
};

write_data = function($type, $url, $data) {
  var $res;
  show_overlay();
  $res = write_with_status($type, $url, $data);
  $('#ajaxOverlay').fadeOut(100);
  if ($res.status >= 300 && $res.status !== 503) {
    bootbox.alert('<h3>Wystąpił błąd w trakcie zapisu danych.</h3>');
  }
  return $res.content;
};

$event_handlers = [];

add_event = function($event, $selector, $function) {
  var $new;
  $new = {
    event: $event,
    selector: $selector
  };
  if (Lazy($event_handlers).indexOf($new) !== -1) {
    return;
  }
  $(document).on($event, $selector, $function);
  return $event_handlers.push($new);
};

get_username = function() {
  if ($username === null) {
    $username = read_data('support/myname');
  }
  return $username;
};

typeIsArray = Array.isArray || function(value) {
  return {}.toString.call(value) === '[object Array]';
};

show_login_error = function($error_code) {
  var $error_message;
  $error_message = (function() {
    switch ($error_code) {
      case 401:
        return 'Wprowadzono błędne dane logowania.';
      case 503:
        return 'Zalogowany jest inny użytkownik lub serwer jest przeciążony.';
      default:
        return 'Błąd logowania wywołany wewnętrznym błędem serwera.';
    }
  })();
  bootbox.alert('<h3 class="text-center">' + $error_message + '</h3>');
  return $('#ajaxOverlay').fadeOut(100);
};

logout = function() {
  var $k, $v;
  $('#subpages-content > div, #page-logged-in-content').hide().html('');
  for ($k in $since) {
    $v = $since[$k];
    $since[$k] = 0;
  }
  $('#login-page').parent('').parent('').show();
  $('li.login').removeClass('active').hide();
  $('form').data('bootstrapValidator').resetForm();
  $('form').trigger("reset");
  $curr_tab = $prev_tab = null;
  if ($curr_ajax_request != null) {
    $curr_ajax_request.abort();
    $curr_ajax_request = null;
  }
  if ($auth_data !== '') {
    read_data('support/logout');
  }
  delete $.ajaxSettings.headers['client-uuid'];
  $auth_data = '';
  $.ajaxSetup({
    headers: {
      "Authorization": ''
    }
  });
  document.cookie = 'JSESSIONID=;expires=Thu, 01 Jan 1970 00:00:01 GMT';
  $last_activity = 0;
  return $username = null;
};

show_measurement_dialog = function($mid) {
  var $date_after_before, $dialog, $doctor, $first_name, $form, $measurement, $patient, $patients, $pesel, $surname, $tmp_pk, date_after_before, pk_from_form;
  $measurement = read_json('measurements/' + $mid);
  $surname = $measurement.patient != null ? ($measurement.patient.surname != null ? $measurement.patient.surname : '') : ($measurement.embeddedSurname != null ? $measurement.embeddedSurname : '');
  $first_name = $measurement.patient != null ? ($measurement.patient.firstName != null ? $measurement.patient.firstName : '') : ($measurement.embeddedFirstName != null ? $measurement.embeddedFirstName : '');
  $pesel = $measurement.patient != null ? $measurement.patient.identityNumber : ($measurement.embeddedIdentityNumber != null ? $measurement.embeddedIdentityNumber : '');
  $doctor = ($measurement.patient != null) && $measurement.patient.doctor ? $measurement.patient.doctor : get_username();
  $form = '<div class="row"> <div class="col-sm-5"> Dane wprowadzone na kardiografie <dl class="dl-horizontal"> <dt>Nazwisko</dt> <dd>' + ($measurement.embeddedSurname != null ? $measurement.embeddedSurname : '[nie wprowadzono]') + '</dd> <dt>Imię (imiona)</dt> <dd>' + ($measurement.embeddedFirstName != null ? $measurement.embeddedFirstName : '[nie wprowadzono]') + '</dd> <dt>PESEL</dt> <dd>' + ($measurement.embeddedIdentityNumber != null ? $measurement.embeddedIdentityNumber : '[nie wprowadzono]') + '</dd> <dt>Data i czas badania</dt> <dd>' + ($measurement.embeddedDate != null ? timestamp_to_datetime($measurement.embeddedDate) : '[nie wprowadzono]') + '</dd> </dl> </div> <div class="col-sm-7"> <strong>Poprawne dane</strong> <form class="form-horizontal measurements-to-fill" autocomplete="off"> <div class="form-group"> <label class="col-xs-4 control-label">Nazwisko</label> <div class="col-xs-7"> <input type="text" class="form-control" name="surname" required value="' + $surname + '"> </div> </div> <div class="form-group"> <label class="col-xs-4 control-label">Imię (imiona)</label> <div class="col-xs-7"> <input type="text" class="form-control" name="firstName" required value="' + $first_name + '"> </div> </div> <div class="form-group"> <label class="col-xs-4 control-label">PESEL</label> <div class="col-xs-7"> <input type="text" class="form-control" name="identityNumber" value="' + $pesel + '"> </div> </div> <div class="form-group"> <label class="col-xs-4 control-label">Data i czas badania</label> <div class="col-xs-7"> <div class="input-group datetime"> <input type="text" class="form-control" name="actualDate" data-bv-date="true" data-bv-date-format="YYYY-MM-DD HH:mm" required value="' + ($measurement.actualDate != null ? timestamp_to_datetime($measurement.actualDate) : ($measurement.embeddedDate != null ? timestamp_to_datetime($measurement.embeddedDate) : '')) + '"> <span class="input-group-addon"><span class="fa fa-calendar"></span></span> </div> </div> </div> <div class="form-group"> <label class="col-xs-4 control-label">Lekarz prowadzący</label> <div class="col-xs-7"> <input type="text" class="form-control" required name="doctor" value="' + $doctor + '"> </div> </div> </form> </div> </div>';
  date_after_before = function($p) {
    if ($p.interview == null) {
      return {
        after: null,
        before: null
      };
    }
    return {
      after: $p['interview']['arrivalDate'] != null ? $p['interview']['arrivalDate'] : ($p['interview']['strokeDate'] != null ? $p['interview']['strokeDate'] : null),
      before: $p['interview']['dateOfDeath'] != null ? $p['interview']['dateOfDeath'] : (($p['interview']['approximateDateOfDeath'] != null) && $p['interview']['approximateDateOfDeath'].match(/\d[\-\.]\d[\-\.]\d/) !== null ? $p['interview']['approximateDateOfDeath'] : null)
    };
  };
  pk_from_form = function($form) {
    return {
      identityNumber: $($form).find('input[name="identityNumber"]').val(),
      firstName: $($form).find('input[name="firstName"]').val(),
      surname: $($form).find('input[name="surname"]').val()
    };
  };
  $patients = Lazy(read_json('patients'));
  $date_after_before = null;
  $tmp_pk = pk_from_form($form);
  $patient = $patients.findWhere($tmp_pk);
  if ($patient != null) {
    $date_after_before = date_after_before($patient);
  }
  return $dialog = bootbox.dialog({
    title: 'Potwierdzenie tożsamości pacjenta',
    message: $form,
    show: false,
    buttons: {
      cancel: {
        label: "Anuluj"
      },
      success: {
        label: "Potwierdź",
        className: "btn-primary",
        callback: function() {
          var $new_patient, $new_user;
          $tmp_pk = pk_from_form($dialog);
          $patient = $patients.findWhere($tmp_pk);
          if ($patient == null) {
            $new_user = $dialog.find('input[name="firstName"], input[name="surname"], input[name="identityNumber"], input[name="doctor"]').serializeJSON();
            $new_user.birthDate = date_to_timestamp(date_from_PESEL($new_user.identityNumber.split('')));
            $new_user.interview = {
              sex: parseInt($new_user.identityNumber.split('')[9]) % 2 === 1 ? 'MALE' : 'FEMALE'
            };
            $patient = write_data('post', 'patients/', JSON.stringify($new_user));
          }
          $measurement = write_data('put', 'measurements/' + $mid, JSON.stringify({
            actualDate: datetime_to_timestamp($dialog.find('input[name="actualDate"]').val())
          }));
          write_data('put', 'patients/' + $patient.id + '/measurements/' + $mid, null);
          $new_patient = $dialog.find('input[name="firstName"], input[name="surname"], input[name="doctor"]').serializeJSON();
          $new_patient.interview = {};
          if ($patient.interview == null) {
            $patient.interview = {};
          }
          if (($patient.interview.weight == null) && ($measurement.weight != null)) {
            $new_patient.interview.weight = $measurement.weight;
          }
          if (($patient.interview.height == null) && ($measurement.height != null)) {
            $new_patient.interview.height = $measurement.height;
          }
          if (($patient.birthDate == null) && ($measurement.embeddedBirthDate != null)) {
            $new_patient.birthDate = $measurement.embeddedBirthDate;
          }
          write_data('put', 'patients/' + $patient.id, JSON.stringify($new_patient));
          return $('a[href="' + $curr_tab + '"]').trigger('click');
        }
      }
    }
  }).on('shown.bs.modal', function() {
    var $typeahead_source, typeahead_callback, typeahead_patient_to_string;
    add_event('keydown', '.bootbox input[type="text"]', function($e) {
      if ($e.which === 13) {
        $($e.target).closest('.modal-content').find('.btn-primary').trigger('click');
        return $e.preventDefault();
      }
    });
    $('.bootbox form').bootstrapValidator({
      feedbackIcons: $feedbackIcons,
      fields: {
        surname: {
          container: 'tooltip'
        },
        firstName: {
          container: 'tooltip'
        },
        actualDate: {
          validators: {
            callback: {
              message: 'Data musi być pomiędzy rokiem 2005 a dniem dzisiejszym',
              callback: function($value) {
                var $basic_valid;
                $basic_valid = !moment(datetime_to_timestamp($value)).isAfter() && !moment($value).isBefore('2005-01-01');
                if ($basic_valid && ($patients.findWhere(pk_from_form($('.bootbox form'))) != null)) {
                  if ($date_after_before.after !== null && moment($value).isBefore($date_after_before.after)) {
                    return {
                      valid: false,
                      message: 'Data pomiaru musi być późniejsza od daty przyjęcia'
                    };
                  } else if ($date_after_before.before !== null && moment($value).isAfter($date_after_before.before)) {
                    return {
                      valid: false,
                      message: 'Data pomiaru musi być wcześniejsza od daty śmierci'
                    };
                  }
                }
                return $basic_valid;
              }
            }
          },
          container: 'tooltip'
        },
        doctor: {
          container: 'tooltip'
        },
        identityNumber: {
          container: 'tooltip',
          validators: {
            callback: {
              message: 'Błędny nr PESEL',
              callback: PESEL_validator
            }
          }
        }
      }
    }).on('success.field.bv', function($e, $data) {
      var $parent, $this_form;
      if ($($e.target).closest('form').find('.has-error').length === 0) {
        $($e.target).closest('.modal-content').find('.btn-primary').removeClass('disabled');
      }
      $this_form = $($e.target).attr('name');
      if ($this_form === 'identityNumber' || $this_form === 'firstName' || $this_form === 'surname') {
        $tmp_pk = pk_from_form($($e.target).closest('form'));
        $patient = $patients.findWhere($tmp_pk);
        if ($patient != null) {
          $date_after_before = date_after_before($patient);
        } else {
          $date_after_before = null;
        }
        $parent = $($e.target).closest('form');
        $($parent).bootstrapValidator('revalidateField', 'actualDate');
      }
      $parent = $data.element.parents('.form-group');
      return $parent.removeClass('has-success');
    }).on('error.form.bv error.field.bv', function($e) {
      return $($e.target).closest('.modal-content').find('.btn-primary').addClass('disabled');
    }).bootstrapValidator('validate');
    $typeahead_source = $patients.toArray();
    typeahead_patient_to_string = function($item) {
      return $item.surname + ' ' + $item.firstName + ' ' + $item.identityNumber;
    };
    typeahead_callback = function($item) {
      Lazy(['identityNumber', 'surname', 'firstName', 'doctor']).each(function($i) {
        var $field;
        $field = $($dialog).find('input[name="' + $i + '"]');
        return $field.val($item[$i]);
      });
      $date_after_before = date_after_before($item);
      return $('.bootbox form').bootstrapValidator('resetForm').bootstrapValidator('validate');
    };
    $('.bootbox form input[name="surname"]').typeahead({
      source: $typeahead_source,
      displayText: typeahead_patient_to_string,
      matcher: function($item) {
        return $item.surname.startsWith(this.query);
      },
      afterSelect: typeahead_callback
    });
    $('.bootbox form input[name="firstName"]').typeahead({
      source: $typeahead_source,
      displayText: typeahead_patient_to_string,
      matcher: function($item) {
        return $item.firstName.startsWith(this.query);
      },
      afterSelect: typeahead_callback
    });
    $('.bootbox form input[name="identityNumber"]').typeahead({
      source: $typeahead_source,
      displayText: typeahead_patient_to_string,
      matcher: function($item) {
        return $item.identityNumber.startsWith(this.query);
      },
      afterSelect: typeahead_callback
    });
    return $('.bootbox.in div.datetime').datetimepicker({
      pickTime: true,
      language: 'pl',
      sideBySide: true,
      maxDate: new Date()
    }).on('dp.change dp.show', function() {
      return $(this).closest('form').bootstrapValidator('revalidateField', $(this).find('input').attr('name'));
    });
  }).modal('show');
};

add_form_after_multi = function($this, $id, $name, $on_val, $placeholder, $val) {
  var $exists, $form;
  if ($placeholder == null) {
    $placeholder = 'Wpisz wartość';
  }
  if ($val == null) {
    $val = null;
  }
  if ($val == null) {
    $val = $($this).val();
  }
  $exists = $('#' + $id).length !== 0;
  if (!$exists && ($val != null) && indexOf.call($val, $on_val) >= 0) {
    $form = '<div class="col-xs-5"> <input type="text" class="form-control" id="' + $id + '" title="' + $placeholder + '" placeholder="' + $placeholder + '" name="' + $name + '" required> </div>';
    $($this).closest('.form-group').append($form);
    $('#' + $id).tooltip({
      placement: 'right'
    });
    return $('#someCreator').bootstrapValidator('addField', $('#' + $id)).bootstrapValidator('revalidateField', $name);
  } else if ($exists && !(indexOf.call($val, $on_val) >= 0)) {
    $('#someCreator').bootstrapValidator('removeField', $('#' + $id));
    return $('#' + $id).closest('div').remove();
  }
};

add_form_after_checkbox = function($this, $id, $name, $on_val, $placeholder) {
  if ($placeholder == null) {
    $placeholder = 'Wpisz wartość';
  }
  return add_form_after_multi($this, $id, $name, $on_val, $placeholder, $($this + ':checked').map(function() {
    return this.value;
  }).get());
};

ajax_request = function($url, $data, $success_handler) {
  var $request_data;
  if ($data == null) {
    $data = '';
  }
  if ($success_handler == null) {
    $success_handler = (function(_this) {
      return function($data) {};
    })(this);
  }
  if ($curr_ajax_request != null) {
    $curr_ajax_request.abort();
  }
  $request_data = {
    type: "GET",
    url: $url,
    dataType: 'json',
    data: $data,
    complete: function($data) {
      if ($auth_data !== '' && $data.status === 503) {
        return $other_user_logout = true;
      }
    },
    success: $success_handler,
    error: function(jqXHR, status) {
      if (status === 'abort') {
        return;
      }
      return bootbox.alert('<h3 class="text-center">Wystąpił błąd</h3>', function() {
        return $('a[href="' + $curr_tab + '"]').trigger('click');
      });
    }
  };
  return $curr_ajax_request = $.ajax($request_data);
};

comet = function($updaters, $auth, $refresh_time) {
  if ($refresh_time == null) {
    $refresh_time = 60;
  }
  if (($auth != null) && $auth !== $auth_data) {
    return;
  }
  Lazy($updaters).each(function($updater) {
    var error;
    try {
      return Lazy([1]).async().each($updater);
    } catch (error) {
      return null;
    }
  });
  return Lazy([1]).async(1000 * $refresh_time).each(function() {
    return comet($updaters, $auth, $refresh_time);
  });
};

$measurements_refresh_queued = false;

measurements_updater = function() {
  var worker;
  worker = new Worker('media/js/workers/measurements.js');
  worker.addEventListener('message', function(e) {
    var $measurements;
    $measurements = e.data;
    if (!($measurements === 0 && isNaN(parseInt($('#measurements-badge').html())))) {
      if ($new_measurements_opened && parseInt($('#measurements-badge').html()) !== $measurements) {
        if ($('.modal-dialog:visible').length) {
          $measurements_refresh_queued = true;
        } else {
          $('a[href="#new-measurements"]').trigger('click');
          $measurements_refresh_queued = false;
        }
      } else if ($new_measurements_opened && $measurements_refresh_queued) {
        $('a[href="#new-measurements"]').trigger('click');
        $measurements_refresh_queued = false;
      }
    }
    return $('#measurements-badge').html($measurements > 0 ? $measurements : '');
  });
  return worker.postMessage({
    cmd: 'start',
    auth: $auth_data
  });
};

phones_filter = function($data) {
  return map_examinations($data).filter(function($v) {
    return $v.qualifiesForPhone;
  });
};

examinations_updater = function() {
  var worker;
  worker = new Worker('media/js/workers/get_examinations.js');
  worker.addEventListener('message', function(e) {
    var error;
    if (e.data[0] !== 'ok') {
      return;
    }
    try {
      worker.postMessage({
        cmd: 'not-ok'
      });
      return worker.postMessage({
        cmd: 'phone'
      });
    } catch (error) {
      return null;
    }
  });
  worker.addEventListener('message', function(e) {
    if (e.data[0] !== 'not-ok') {
      return;
    }
    return $('#to-fill-badge').html(e.data[1] > 0 ? e.data[1] : '');
  });
  worker.addEventListener('message', function(e) {
    if (e.data[0] !== 'phone') {
      return;
    }
    return $('#phones-badge').html(e.data[1] > 0 ? e.data[1] : '');
  });
  return worker.postMessage({
    cmd: 'start',
    auth: $auth_data
  });
};

$logout_info = false;

auto_logout = function() {
  var $duration, $timer;
  if ($last_activity === 0) {
    return;
  }
  if ($auth_data !== '') {
    $duration = moment.duration(($logout_after * 60 - (moment().unix() - $last_activity)) * 1000);
    $timer = $('#logout-timer');
    $timer.removeClass().html($duration.minutes() + ':' + ($duration.seconds() < 10 ? '0' : '') + $duration.seconds());
    if ($duration.asSeconds() > 60) {
      $timer.addClass('text-success');
    } else if ($duration.asSeconds() >= 30) {
      $timer.addClass('text-warning');
    } else {
      $timer.addClass('text-danger');
    }
    if ($logout_info) {
      $('#logout-info-timer').html("Sesja wygaśnie za: 0:" + (($duration.seconds() < 10 ? '0' : '') + $duration.seconds()));
    }
  }
  if ($auth_data !== '' && moment().unix() - $last_activity >= $logout_after * 60 - 30 && !$logout_info) {
    $logout_info = true;
    bootbox.dialog({
      closeButton: false,
      message: '<h3 id="logout-info-timer" class="text-center">Sesja wygaśnie za: 0:30</h3>',
      buttons: {
        cancel: {
          label: 'Wyloguj',
          callback: function() {
            $('.bootbox').modal('hide');
            logout();
            $logout_info = false;
            return true;
          }
        },
        confirm: {
          label: 'Kontynuuj sesję',
          callback: function() {
            $last_activity = moment().unix();
            $logout_info = false;
            return true;
          }
        }
      }
    });
  }
  if ($auth_data !== '' && ($other_user_logout || moment().unix() - $last_activity >= $logout_after * 60)) {
    $('.bootbox').modal('hide');
    logout();
    $logout_info = false;
    if ($other_user_logout) {
      return bootbox.alert('<h3 class="text-center">Wylogowano, ponieważ do aplikacji zalogował się inny użytkownik lub serwer jest przeciążony.</h3>');
    } else {
      return bootbox.alert('<h3 class="text-center">Sesja wygasła.</h3>');
    }
  }
};

sort_examinations = function($divs, $href, $sort_by, $sort_order) {
  if ($sort_by == null) {
    $sort_by = 'name';
  }
  if ($sort_order == null) {
    $sort_order = 'asc';
  }
  console.time('examinations sort');
  $divs = Lazy($divs).sortBy(function($x) {
    $x = $($href + ' .panel[data-uid="' + $x + '"]').find('[data-type="' + $sort_by + '"]').html();
    if ($sort_by === 'name') {
      return Lazy($x).split(' ').reduce((function($old, $new) {
        return $old += $new + ' ';
      }), '');
    }
    return $x;
  }, $sort_order === 'asc');
  $divs.each(function($val) {
    return $($href + ' table#do-uzupelnienia').next().prepend($($href + ' .panel[data-uid="' + $val + '"]').detach());
  });
  console.timeEnd('examinations sort');
  return null;
};

measurements_page_handler = function($data, $href) {
  $(($href += '-div') + '-tmp').empty();
  if ($data.isEmpty()) {
    return;
  }
  add_event('click', 'a[data-type="del-measurement"]', function($e) {
    var $anchor;
    $e.preventDefault();
    $anchor = $(this);
    return bootbox.confirm({
      title: "Potwierdzenie usunięcia pomiaru",
      message: "Czy na pewno usunąć pomiar?",
      callback: function($result) {
        if ($result) {
          write_data('delete', 'measurements/' + $anchor.data('id'), null);
          return $('a[href="' + $curr_tab + '"]').trigger('click');
        }
      }
    }).find("div.modal-dialog").css("width", "450px");
  });
  return $data.each(function($v) {
    var $date, $embedded_data, $patient_name, $tmp;
    if ($v.patient != null) {
      $patient_name = '';
      if ($v.patient.surname != null) {
        $patient_name += $v.patient.surname + ' ';
      }
      if ($v.patient.firstName != null) {
        $patient_name += $v.patient.firstName;
      }
    } else {
      $patient_name = '&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp-';
    }
    $embedded_data = '';
    if ($v.embeddedSurname != null) {
      $embedded_data += $v.embeddedSurname + ' ';
    }
    if ($v.embeddedFirstName != null) {
      $embedded_data += $v.embeddedFirstName;
    }
    if ($embedded_data === '') {
      $embedded_data = '[nie wprowadzono]';
    }
    $date = $v.actualDate != null ? timestamp_to_datetime($v.actualDate) : $v.zboxAcquisitionDate != null ? timestamp_to_datetime($v.zboxAcquisitionDate) : $v.embeddedDate != null ? timestamp_to_datetime($v.embeddedDate) : '';
    $tmp = '<tr id="new-measurements' + $v.id + '"> <td>' + $date + '</td> <td>' + $patient_name + '</td> <td>' + $embedded_data + '</td> <td>' + ($v.patient == null ? text_to_err('tożsamość niepotwierdzona') : $measurement_ok) + '</td> <td class="text-right"><a href="#" class="btn btn-danger btn-xs" data-id="' + $v.id + '" data-type="del-measurement">Usuń</a></td> </tr>';
    add_event('click', $href + ' tr#new-measurements' + $v.id + ' > td:not(:last-of-type)', function() {
      return show_measurement_dialog($v.id);
    });
    return $($href + ' table#measurements_all tbody').prepend($tmp);
  });
};

examinations_page_handler = function($data, $href) {
  var $divs;
  if ($data.isEmpty()) {
    return;
  }
  add_event('click', 'a[data-type="del-person"]', function($e) {
    var $anchor;
    $e.preventDefault();
    $anchor = $(this);
    return bootbox.confirm({
      title: "Potwierdzenie usunięcia pacjenta",
      message: "Czy na pewno usunąć pacjenta: " + $anchor.data('patient') + "?",
      callback: function($result) {
        if ($result) {
          write_data('delete', 'patients/' + $anchor.data('id'), null);
          return $('a[href="' + $curr_tab + '"]').trigger('click');
        }
      }
    }).find("div.modal-dialog").css("width", "450px");
  });
  add_event('click', 'a[data-type="edit-measurement"]', function($e) {
    $e.preventDefault();
    return show_measurement_dialog($(this).data('id'));
  });
  $href += '-div';
  $data.each(function($v) {
    var $ankieta_class, $arrival_date, $doctor, $obserwacja_class, $patient_name, $phones, $pomiary, $tmp;
    $pomiary = Lazy($v.measurements).reduce((function($pomiary, $v2) {
      var $date;
      $date = timestamp_to_datetime($v2.actualDate);
      return $pomiary += '<div class="row measurement-row"> <div class="col-xs-offset-1 col-xs-3">Pomiar ' + $date + '</div> <div class="col-xs-2"><a href="#" data-id="' + $v2.id + '" data-type="edit-measurement" class="btn btn-primary btn-xs">EDYTUJ</a></div> </div>';
    }), '');
    $phones = [];
    if ($href === '#phones-div') {
      if (($v.interview != null) && ($v.interview.phoneNumber != null)) {
        $phones.push($v.interview.phoneNumber);
      }
      if (($v.interview != null) && ($v.interview.phoneNumber2 != null)) {
        $phones.push($v.interview.phoneNumber2);
      }
      if ($phones.length === 0) {
        $phones = '<div class="row"><div class="col-xs-offset-1 col-xs-3 text-danger"><strong>Brak wpisanego telefonu kontaktowego</strong></div></div>';
      } else {
        $phones = Lazy($phones).reduce(function($old, $phone) {
          return $old + '<a href="tel:' + $phone + '"><i class="fa fa-phone"></i> ' + $phone + '</a> ';
        }, '<div class="row"><div class="col-xs-offset-1 col-xs-3 text-danger">' + ($phones.length === 1 ? 'Telefon kontaktowy' : 'Telefony kontaktowe') + ': ') + '</div></div>';
      }
    } else {
      $phones = '';
    }
    $ankieta_class = -1 !== $v.notes.indexOf('niepełna ankieta') ? ' text-danger' : '';
    $obserwacja_class = -1 !== $v.notes.indexOf('brak informacji o przeżyciu') ? ' text-danger' : '';
    $patient_name = '';
    if ($v.surname != null) {
      $patient_name += $v.surname + ' ';
    }
    if ($v.firstName != null) {
      $patient_name += $v.firstName;
    }
    if ($patient_name === '') {
      $patient_name = '[nie wprowadzono]';
    }
    $doctor = $v.doctor != null ? $v.doctor : '[nie wprowadzono]';
    $arrival_date = null;
    if (($v.interview != null) && ($v.interview.arrivalDate != null)) {
      $tmp = parseInt($v.interview.arrivalDate);
      if (!isNaN($tmp)) {
        $arrival_date = timestamp_to_date($tmp);
      }
    }
    if (($arrival_date == null) && ($v.measurements != null) && $v.measurements.length !== 0) {
      $tmp = Lazy($v.measurements).pluck('actualDate').min();
      if (!isNaN($tmp)) {
        $arrival_date = moment($tmp).isSame(moment(), 'day') ? moment($tmp).format('HH:mm') : timestamp_to_date($tmp);
      }
    }
    if ($arrival_date == null) {
      $arrival_date = '[brak]';
    }
    $tmp = '<div class="panel panel-default" data-uid="' + $v.id + '"> <div class="panel-heading" role="tab"> <h4 class="panel-title"> <a data-toggle="collapse" href="#patients' + $v.id + '" aria-expanded="true"> <div id="patients-row' + $v.id + '"> <div class="col-xs-1 id-col" data-type="id"><span class="fa fa-chevron-down patient-info"></span>' + $v.id + '</div> <div class="col-xs-2 name-col" data-type="name">' + $patient_name + '</div> <div class="col-xs-2 arrival-date-col" data-type="date">' + $arrival_date + '</div> <div class="col-xs-2 doctor-col" data-type="doctor">' + $doctor + '</div> <div class="col-xs-5 notes-col examination-notes">' + $v.notes + '</div> </div> <a href="#" class="btn btn-danger btn-xs del-person-btn" style="color: #fff" data-id="' + $v.id + '" data-type="del-person" data-patient="' + $v.firstName + ' ' + $v.surname + ' ' + $v.identityNumber + '">Usuń</a>&nbsp; </a> </h4> </div> <div id="patients' + $v.id + '" class="panel-collapse collapse" role="tabpanel"> <div class="panel-body">' + $pomiary + $phones + '<div class="row"> <div class="col-xs-offset-1 col-xs-3' + $ankieta_class + '">Ankieta</div> <div class="col-xs-2"><a href="#patients/ankieta/' + $v.id + '" class="btn btn-primary btn-xs move-to">EDYTUJ</a></div> </div> <div class="row"> <div class="col-xs-offset-1 col-xs-3' + $obserwacja_class + '">Obserwacja półroczna / zgon</div> <div class="col-xs-2"><a href="#patients/observation/' + $v.id + '" class="btn btn-primary btn-xs move-to">EDYTUJ</a></div> </div> </div> </div> </div>';
    return $($href + ' table#do-uzupelnienia').next().prepend($tmp);
  });
  $divs = [];
  $($href + ' .panel').each(function($id, $el) {
    return $divs.push($($el).data('uid'));
  });
  return add_event('click', $href + ' table#do-uzupelnienia a', function($e) {
    var $asc, $order;
    $e.preventDefault();
    $($href + ' table#do-uzupelnienia i').removeClass('fa-sort-asc fa-sort-desc fa-sort').addClass('fa-sort');
    $asc = $(this).data('asc') === 1;
    $order = $asc ? 'asc' : 'desc';
    $(this).data('asc', $asc ? 0 : 1).find('i').addClass($order === 'asc' ? 'fa-sort-asc' : 'fa-sort-desc');
    return sort_examinations($divs, $href, $(this).data('sortby'), $order);
  });
};

$interview_arrival_date = null;

interview_page_handler = function($data) {
  var $uid, drugs_handler, fix_section_if_valid, form_hidden, gfr, gfrmdrd;
  $('span#patient-name').html($data.firstName + ' ' + $data.surname);
  $uid = $data.id;
  $interview_arrival_date = arrivalDate($data);
  $('[id^=detail-]').hide();
  add_event('click', '.toggle', function() {
    var $target;
    $target = $('#' + $(this).attr('data-toggle'));
    return $target.slideToggle();
  });
  form_hidden = function($this) {
    var $el, $parent;
    $el = $($this).closest('li.list-group-item');
    if (!$el.find('[data-bv-result="INVALID"]:visible').length) {
      $el.find('.toggle').css('color', '').find('.col-xs-10').find('.err-info').remove();
    }
    $parent = $($this).parents('.form-group');
    $parent.removeClass('has-success');
    return $('#someCreator').bootstrapValidator('disableSubmitButtons', false);
  };
  fix_section_if_valid = (function(_this) {
    return function($element) {
      var $el, $parent;
      $el = $element.closest('li.list-group-item');
      if (!($el.find('[data-bv-result="INVALID"]').length > 0)) {
        $el.find('.toggle').css('color', '').find('.col-xs-10').find('.err-info').remove();
      }
      $parent = $element.parents('.form-group');
      return $parent.removeClass('has-success');
    };
  })(this);
  Lazy([1]).async().each(function() {
    var $death_time, arrivalDateValid, strokeDateValid;
    console.time("validator setup");
    $death_time = ($data.interview != null) && ($data.interview.dateOfDeath != null) ? $data.interview.dateOfDeath : null;
    arrivalDateValid = function($value) {
      var $strokeDate;
      $value = date_to_timestamp($value);
      if (moment($value).isAfter() || moment($value).isBefore('2005-01-01')) {
        return {
          valid: false,
          message: 'Data musi być pomiędzy rokiem 2005 a dniem dzisiejszym'
        };
      }
      $strokeDate = $('#inputStrokeOccur').val();
      if ($strokeDate !== '' && moment($value).isBefore($strokeDate)) {
        return {
          valid: false,
          message: 'Data przyjęcia musi być późniejsza od daty przyjęcia'
        };
      }
      if (($death_time != null) && moment($value).isAfter($death_time)) {
        return {
          valid: false,
          message: 'Data przyjęcia musi być wcześniejsza od daty śmierci'
        };
      }
      return true;
    };
    strokeDateValid = function($value) {
      var $arrivalDate;
      $value = date_to_timestamp($value);
      if (moment($value).isAfter() || moment($value).isBefore('2005-01-01')) {
        return {
          valid: false,
          message: 'Data musi być pomiędzy rokiem 2005 a dniem dzisiejszym'
        };
      }
      $arrivalDate = $interview_arrival_date;
      if ($arrivalDate !== '' && moment($value).isAfter($arrivalDate)) {
        return {
          valid: false,
          message: 'Data udaru musi być wcześniejsza od daty przyjęcia'
        };
      }
      if (($death_time != null) && moment($value).isAfter($death_time)) {
        return {
          valid: false,
          message: 'Data udaru musi być wcześniejsza od daty śmierci'
        };
      }
      return true;
    };
    $('#someCreator').bootstrapValidator({
      feedbackIcons: $feedbackIcons,
      excluded: [':disabled'],
      fields: {
        identityNumber: {
          validators: {
            callback: {
              message: 'Błędny nr PESEL',
              callback: PESEL_validator
            }
          }
        },
        birthDate: {
          validators: {
            date: {
              format: 'YYYY-MM-DD'
            },
            callback: {
              message: 'Błędna data urodzenia',
              callback: function($value) {
                return birthDate_validator($value, $('#inputPESEL').val());
              }
            }
          }
        },
        'interview[arrivalDate]': {
          validators: {
            date: {
              format: 'YYYY-MM-DD'
            },
            callback: {
              callback: function($val) {
                $interview_arrival_date = moment($val);
                $interview_arrival_date = $interview_arrival_date.isValid() ? $interview_arrival_date.valueOf() : arrivalDate($data);
                return arrivalDateValid($val);
              }
            }
          }
        },
        'interview[strokeDate]': {
          validators: {
            date: {
              format: 'YYYY-MM-DD'
            },
            callback: {
              callback: strokeDateValid
            }
          }
        },
        'interview[rankinPoints]': {
          validators: {
            integer: {}
          }
        },
        'interview[nihssPoints]': {
          validators: {
            integer: {}
          }
        },
        'interview[gcsScale]': {
          validators: {
            integer: {}
          }
        },
        'interview[totalCholesterol]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[ldl]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[hdl]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[trg]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[rbc]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[wbc]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[hgb]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[ht]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[mcv]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[plt]': {
          validators: {
            numeric: {}
          },
          container: 'tooltip'
        },
        'interview[creatinine]': {
          validators: {
            numeric: {}
          }
        },
        'interview[tsh]': {
          validators: {
            numeric: {}
          }
        },
        'interview[potassium]': {
          validators: {
            numeric: {}
          }
        },
        'interview[inr]': {
          validators: {
            numeric: {}
          }
        },
        'interview[crp]': {
          validators: {
            numeric: {}
          }
        },
        'interview[education]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[employment]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[sex]': {
          validators: {
            notEmpty: {},
            callback: {
              message: 'Płeć nie zgadza się z numerem PESEL',
              callback: function($value) {
                return sex_validator($('input[name="interview[sex]"]:checked').val(), $('#inputPESEL').val());
              }
            }
          }
        },
        'interview[weightAccuracy]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[symptomLesionLocation]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[screeningTypeDate]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[strokeType]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[screeningLesionLocation]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[transcranialUltrasonographyResult]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[headArteriesUltrasonographyResult]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[hypertension]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[kidneysDiseases]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[diabetes]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[ischemicHeartDisease]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[ccsClass]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[lipidsDisorders]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[atrialFibrillation]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[cigarettes]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[neckArteriesDiseases]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[heartFailure]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[nyhaClass]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[veinsThrombosis]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[hormoneTherapy]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[familyDiseasesStroke]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[familyDiseasesHeartFailure]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[familyDiseasesDiabetes]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[familyDiseasesIschemicHeart]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[familyDiseasesHypertension]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[drugsBeforeStroke][]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[drugsOnHospitalisation][]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[drugsOnDischarge][]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[pastStrokeYear]': {
          validators: {
            notEmpty: {},
            callback: {
              message: 'Data wcześniejszego udaru musi być przed datą przyjęcia',
              callback: function($value) {
                if (!(get_year_from_timestamp($interview_arrival_date) >= parseInt($value))) {
                  return false;
                }
                return strokeInThePastValid($interview_arrival_date, $('#inputStrokeInThePast1').is(':checked') ? "YES" : "NO", $value, $('#inputStrokeDateMonth').val());
              }
            }
          }
        },
        'interview[glucoseLevelDay1]': {
          validators: {
            notEmpty: {},
            numeric: {}
          }
        },
        'interview[glucoseLevelDay5to7]': {
          validators: {
            notEmpty: {},
            numeric: {}
          }
        },
        'interview[afTreatedWithAnticoagulant]': {
          validators: {
            notEmpty: {}
          }
        }
      }
    }).on('success.form.bv', function($e) {
      return $e.preventDefault();
    }).on('error.form.bv', function($e) {
      return $e.preventDefault();
    }).on('error.field.bv', (function(_this) {
      return function($e, $data) {
        var $color, $el;
        $color = '#d11114';
        $el = $data.element.closest('li.list-group-item').find('.toggle').css('color', $color).find('.col-xs-10');
        if (!$el.find('.err-info').length) {
          $el.prepend('<i style="display: block; margin-right: 5px; margin-top: 3px; color: ' + $color + ';" class="pull-left fa fa-exclamation-circle err-info"></i>');
        }
        return $data.bv.disableSubmitButtons(false);
      };
    })(this)).on('success.field.bv', function($e, $data) {
      fix_section_if_valid($data.element);
      return $data.bv.disableSubmitButtons(false);
    });
    return console.timeEnd('validator setup');
  }).onComplete(function() {
    var $curr_form, $current, $el, $ik, $input, $iv, $k, $non_existing, $sk, $sv, $tmp, $v, hospitalTakeChange, ref, ref1, strokeOccurChange;
    hospitalTakeChange = function() {
      return $('#someCreator').bootstrapValidator('revalidateField', 'interview[strokeDate]');
    };
    strokeOccurChange = function() {
      return $('#someCreator').bootstrapValidator('revalidateField', 'interview[arrivalDate]');
    };
    add_event('keyup change', '#inputHospitalTake', hospitalTakeChange);
    add_event('keyup change', '#inputStrokeOccur', strokeOccurChange);
    $('#inputStrokeOccur').parent().datetimepicker($datepicker_settings).on('dp.change', strokeOccurChange);
    $('#inputHospitalTake').parent().datetimepicker($datepicker_settings).on('dp.change', hospitalTakeChange);
    $non_existing = [];
    console.time("basic data");
    for ($k in $data) {
      $v = $data[$k];
      if ($k === 'id' || $k === 'measurements' || $k === 'version' || $k === 'interview') {
        continue;
      }
      if ($k.indexOf('date') > -1 || $k.indexOf('Date') > -1) {
        $v = timestamp_to_date($v);
      }
      $('#someCreator').find('input[name="' + $k + '"]').attr('value', $v);
    }
    console.timeEnd("basic data");
    console.time("interview");
    ref = $data.interview;
    for ($ik in ref) {
      $iv = ref[$ik];
      if ($ik === 'id') {
        continue;
      }
      if (($ik.indexOf('date') > -1 || $ik.indexOf('Date') > -1) && !isNaN(parseInt($iv))) {
        $iv = timestamp_to_date($iv);
      }
      if ($('#someCreator textarea[name="interview[' + $ik + ']"]').length > 0) {
        $('#someCreator textarea[name="interview[' + $ik + ']"]').text($iv);
      } else if ($('#someCreator input[name^="interview[' + $ik + '"]').length + $('#someCreator select[name^="interview[' + $ik + '"]').length === 0) {
        $non_existing.push($ik);
      } else if (typeIsArray($iv)) {
        $current = $('#someCreator select[name="interview[' + $ik + '][]"]');
        if ($current.is('select')) {
          for ($sk in $iv) {
            $sv = $iv[$sk];
            if (isNaN(parseInt($sk))) {
              break;
            }
            $current.find('option[value="' + $sv + '"]').attr('selected', true);
          }
          $current.selectpicker('refresh');
        } else {
          Lazy($iv).each(function($chk) {
            $chk = $('#someCreator input[name="interview[' + $ik + '][]"][value="' + $chk + '"]');
            if (!$chk.is(':checked')) {
              return $chk.icheck('toggle');
            }
          });
        }
      } else if ($('#someCreator select[name="interview[' + $ik + ']"]').length > 0) {
        $current = $('#someCreator select[name="interview[' + $ik + ']"]');
        $current.find('option[value="' + $iv + '"]').attr('selected', true);
        $current.selectpicker('refresh');
      } else if ((ref1 = $('#someCreator input[name="interview[' + $ik + ']"]').attr('type')) === 'radio' || ref1 === 'checkbox') {
        $el = $('#someCreator input[name="interview[' + $ik + ']"][value="' + $iv + '"]');
        if (!$el.is(':checked')) {
          $el.icheck('toggle');
        }
      } else {
        $input = $('#someCreator').find('input[name="interview[' + $ik + ']"]');
        $input.attr('value', $iv);
      }
    }
    console.timeEnd("interview");
    console.time("events");
    Lazy($event_handlers).each(function($handler) {
      if ($handler.event == null) {
        return true;
      }
      if ($handler.event === 'change' || $handler.event === 'keyup' || ($handler.event === 'click' && $($handler.selector).prop('type') === 'text')) {
        return $($handler.selector).trigger($handler.event);
      }
    });
    console.timeEnd("events");
    console.time("added");
    while (($non_existing != null) && $non_existing.length > 0) {
      $tmp = $non_existing.pop();
      $curr_form = $('#someCreator').find('input[name="interview[' + $tmp + ']"]');
      $curr_form.attr('value', $data['interview'][$tmp]);
      if ($curr_form.length === 0) {
        $('#someCreator').find('select[name="interview[' + $tmp + ']"]').selectpicker('val', $data['interview'][$tmp]);
      }
    }
    console.timeEnd("added");
    add_event('keyup', '#inputPESEL', function($e) {
      var $identityNumber;
      $identityNumber = $('#inputPESEL').val();
      if (PESEL_validator($identityNumber).valid) {
        $identityNumber = $identityNumber.split('');
        $('#inputBirthDate').val(date_from_PESEL($identityNumber));
        $('input[name="interview[sex]"][value="' + (parseInt($identityNumber[9]) % 2 ? 'MALE' : 'FEMALE') + '"]').trigger('click');
      }
      $('#someCreator').bootstrapValidator('revalidateField', 'birthDate');
      return $('#someCreator').bootstrapValidator('revalidateField', 'interview[sex]');
    });
    if ($('input[name="interview[ischemicHeartDisease]"]:checked').length === 0) {
      $('#someCreator').bootstrapValidator('enableFieldValidators', 'interview[ccsClass]', false);
      $('#inputCcs').attr('disabled', true).closest('div.fluid-row').hide();
    }
    if ($('input[name="interview[heartFailure]"]:checked').length === 0) {
      $('#someCreator').bootstrapValidator('enableFieldValidators', 'interview[nyhaClass]', false);
      $('#inputNyha').attr('disabled', true).closest('div.fluid-row').hide();
    }
    if ($('input[name="interview[diabetes]"]:checked').length === 0) {
      $('input[name="interview[glucoseLevelDay1]"], input[name="interview[glucoseLevelDay5to7]"]').attr('disabled', true).closest('div.fluid-row').hide();
    }
    if ($('input[name="interview[atrialFibrillation]"]:checked').length === 0) {
      $('input[name="interview[afTreatedWithAnticoagulant]"]').attr('disabled', true).closest('div.fluid-row').hide();
    }
    $('#someCreator').bootstrapValidator('resetForm').bootstrapValidator('validate');
    if ($('#ajaxOverlay').is(':visible')) {
      $('#ajaxOverlay').fadeOut(100);
    }
    return $('input[title]').tooltip({
      placement: 'left'
    });
  });
  add_event('click', '#someCreator button[type="submit"]', function() {
    var $form;
    $form = $('#someCreator').serializeJSON({
      parseNumbers: true
    });
    $form = Lazy($form).map(function($v, $k) {
      return [$k, $k === 'birthDate' ? date_to_timestamp($v) : $v];
    }).toObject();
    $form.interview = Lazy($form.interview).map(function($v, $k) {
      return [$k, ($k.indexOf('date') > -1 || $k.indexOf('Date') > -1) && $k !== 'screeningTypeDate' ? date_to_timestamp($v) : $v];
    }).toObject();
    write_data('put', 'patients/' + $uid, JSON.stringify($form));
    return $('a[href="' + $prev_tab + '"]').trigger('click');
  });
  gfr = function($e) {
    var $age, $body_mass, $kreatynina, $val;
    $(this).val('');
    $age = moment().diff($('#inputBirthDate').val(), 'years');
    $body_mass = parseFloat($('#inputBodyMass').val());
    if (isNaN($body_mass)) {
      $body_mass = 0.0;
    }
    $kreatynina = parseFloat($('#inputKreatynina').val());
    if (isNaN($kreatynina)) {
      $kreatynina = 0.0;
    }
    $val = 0;
    switch ($('select[name="interview[unitCreatinine]"]').val()) {
      case 'MG_PER_DL':
        $val = ($('#inputSexK').prop('checked') ? 0.85 : 1.0) * (140 - $age) * $body_mass / (72 * $kreatynina);
        break;
      default:
        $val = ($('#inputSexK').prop('checked') ? 1.04 : 1.23) * (140 - $age) * $body_mass / $kreatynina;
    }
    $(this).val($val !== 0 && isFinite($val) ? $val.toFixed(3) : '');
    if (!($e.type === 'keypress' && $e.key === 'Tab')) {
      return $e.preventDefault();
    }
  };
  add_event('click keypress change mousedown contextmenu', '#inputGFR', gfr);
  add_event('keyup change', '#inputKreatynina', function() {
    return $('#inputGFR').trigger('click');
  });
  add_event('change', 'select[name="interview[unitCreatinine]"]', function() {
    return $('#inputGFR, #inputGFRMDRD').trigger('click');
  });
  gfrmdrd = function($e) {
    var $age, $kreatynina, $val;
    $age = moment().diff($('#inputBirthDate').val(), 'years');
    $kreatynina = parseFloat($('#inputKreatynina').val());
    if (isNaN($kreatynina)) {
      $kreatynina = 0.0;
    }
    if ($('select[name="interview[unitCreatinine]"]').val() === 'UMOL_PER_L') {
      $kreatynina /= 88.4;
    }
    $val = 186.3 * Math.pow($kreatynina, -1.154) * Math.pow($age, -0.203) * ($('#inputSexK').prop('checked') ? 0.85 : 1.0);
    $(this).val(isFinite($val) ? $val.toFixed(3) : '');
    if (!($e.type === 'keypress' && $e.key === 'Tab')) {
      return $e.preventDefault();
    }
  };
  add_event('click keypress change mousedown contextmenu', '#inputGFRMDRD', gfrmdrd);
  add_event('keyup change', '#inputKreatynina', function() {
    return $('#inputGFRMDRD').trigger('click');
  });
  add_event('ifChecked', 'input[name="interview[symptomLesionLocation]"]', function() {
    if ($(this).attr('id') !== 'inputLocation5') {
      $('#inputLocationText').closest('.fluid-row').remove();
      return $('#someCreator').bootstrapValidator('removeField', $('#inputLocationText').find('input'));
    }
  });
  add_event('ifChecked', '#inputLocation5', function() {
    var $el, $form;
    if ($('#inputLocationText').length === 0) {
      $el = $($horizontal_form_row);
      $form = '<input type="text" class="form-control" id="inputLocationText" placeholder="inna lokalizacja" name="interview[otherLesionLocation]" required>';
      $el.find('.form-group').children('div').html($form);
      $el.find('.form-group').children('label').html('inna lokalizacja');
      $(this).closest('.fluid-row').after($el);
      $('#someCreator').bootstrapValidator('addField', $('#inputLocationText'));
      return $('#someCreator').bootstrapValidator('revalidateField', $('#inputLocationText'));
    }
  });
  add_event('ifChecked', '#inputStrokeInThePast1', function() {
    var $el, $form;
    $el = $($horizontal_form_row);
    $form = '<input type="text" class="form-control" id="inputStrokeInThePastYear" placeholder="Rok, w którym wystąpił udar" name="interview[pastStrokeYear]" required>';
    $el.find('.form-group').children('div').html($form);
    $el.find('.form-group').children('label').html('Rok, w którym wystąpił udar');
    $(this).closest('.fluid-row').after($el);
    $('#someCreator').bootstrapValidator('addField', $('#inputStrokeInThePastYear'));
    return $('#someCreator').bootstrapValidator('revalidateField', $('#inputStrokeInThePastYear'));
  });
  add_event('ifChecked', 'input[name="interview[strokeInThePast]"]', function() {
    if ($(this).attr('id') !== 'inputStrokeInThePast1') {
      $('#inputStrokeInThePastYear').val('').trigger('keyup').closest('.fluid-row').remove();
      $('#someCreator').bootstrapValidator('removeField', $('#inputStrokeInThePastYear').find('input'));
      return form_hidden(this);
    }
  });
  add_event('keyup', '#inputStrokeInThePastYear', function() {
    var $curr_year, $el, $form, $max_month, $month, $val;
    $curr_year = get_year_from_timestamp($interview_arrival_date);
    if ($('#inputStrokeDateMonth').length === 0 && ($curr_year === parseInt($(this).val()) || $curr_year - 1 === parseInt($(this).val()))) {
      $el = $($horizontal_form_row);
      $form = '<select name="interview[pastStrokeMonth]" id="inputStrokeDateMonth" class="form-control selectpicker" title="Miesiąc, w którym wystąpił udar" multiple data-max-options="1" required> <option value="1">Styczeń</option> <option value="2">Luty</option> <option value="3">Marzec</option> <option value="4">Kwiecień</option> <option value="5">Maj</option> <option value="6">Czerwiec</option> <option value="7">Lipiec</option> <option value="8">Sierpień</option> <option value="9">Wrzesień</option> <option value="10">Październik</option> <option value="11">Listopad</option> <option value="12">Grudzień</option> </select>';
      $el.find('label').html('Miesiąc, w którym wystąpił udar').attr('for', 'inputStrokeDateMonth');
      $el.find('.form-group').children('div').addClass('selectContainer').html($form);
      $(this).closest('.fluid-row').after($el);
      $('#inputStrokeDateMonth').selectpicker();
      $('#someCreator').bootstrapValidator('addField', $('#inputStrokeDateMonth'));
      $('#someCreator').bootstrapValidator('revalidateField', $('#inputStrokeDateMonth'));
    }
    if (!(($curr_year === parseInt($(this).val()) || $curr_year - 1 === parseInt($(this).val())) || $('#inputStrokeDateMonth').length === 0)) {
      $('#someCreator').bootstrapValidator('removeField', $('#inputStrokeDateMonth'));
      $('#inputStrokeDateMonth').closest('.fluid-row').remove();
      return $('#inputStrokeDateMonth').off('change');
    } else {
      $val = parseInt($(this).val());
      $month = parseInt($('#inputStrokeDateMonth').val());
      $max_month = get_month_from_timestamp($interview_arrival_date) + 1;
      $('#inputStrokeDateMonth').find('option').each(function() {
        return $(this).attr('disabled', $(this).val() > $max_month && $curr_year === $val);
      });
      $('#inputStrokeDateMonth').selectpicker('refresh');
      return $('#inputStrokeDateMonth').on('change', function() {
        return $('#someCreator').bootstrapValidator('revalidateField', 'interview[pastStrokeYear]');
      });
    }
  });
  add_event('ifChecked', '#inputDiabetes1', function() {
    $('input[name="interview[glucoseLevelDay1]"], input[name="interview[glucoseLevelDay5to7]"]').attr('disabled', false).closest('div.fluid-row').show();
    $('#someCreator').bootstrapValidator('enableFieldValidators', 'interview[glucoseLevelDay1]', true).bootstrapValidator('revalidateField', 'interview[glucoseLevelDay1]');
    return $('#someCreator').bootstrapValidator('enableFieldValidators', 'interview[glucoseLevelDay5to7]', true).bootstrapValidator('revalidateField', 'interview[glucoseLevelDay5to7]');
  });
  add_event('ifChecked', '#inputDiabetes3, #inputDiabetes2', function() {
    if ($(this).attr('id') === 'inputDiabetes3') {
      $('#inputDiabetesLevel2, #inputDiabetesLevel1').val('');
    }
    $('input[name="interview[glucoseLevelDay1]"], input[name="interview[glucoseLevelDay5to7]"]').attr('disabled', true).closest('div.fluid-row').hide();
    return form_hidden(this);
  });
  add_event('keyup', 'input[name="interview[totalCholesterol]"], input[name="interview[ldl]"], input[name="interview[hdl]"], input[name="interview[trg]"]', function() {
    if ($('#inputZaburzenia3').prop('checked')) {
      return $('#inputZaburzenia3').icheck('toggle');
    }
  });
  add_event('ifChecked', '#inputCad1', function() {
    $('#inputCcs').attr('disabled', false).closest('div.fluid-row').show();
    return $('#someCreator').bootstrapValidator('enableFieldValidators', 'interview[ccsClass]', true).bootstrapValidator('revalidateField', 'interview[ccsClass]');
  });
  add_event('ifChecked', '#inputCad2, #inputCad3', function() {
    $('#someCreator').bootstrapValidator('enableFieldValidators', 'interview[ccsClass]', false);
    $('#inputCcs').attr('disabled', true).closest('div.fluid-row').hide();
    return form_hidden(this);
  });
  add_event('ifChecked', '#inputMigotanie', function() {
    $('input[name="interview[afTreatedWithAnticoagulant]"]').attr('disabled', false).closest('div.fluid-row').show();
    return $('#someCreator').bootstrapValidator('revalidateField', 'interview[afTreatedWithAnticoagulant]');
  });
  add_event('ifChecked', '#inputMigotanie2, #inputMigotanie3', function() {
    $('input[name="interview[afTreatedWithAnticoagulant]"]').attr('disabled', true).closest('div.fluid-row').hide();
    return form_hidden(this);
  });
  add_event('ifChecked', 'input[name="interview[cigarettes]"]', function() {
    var $exists, $form;
    $exists = $('#inputPaczkoLata').length !== 0;
    if ($(this).val() === 'ACTIVE_SMOKING' && !$exists) {
      $form = '<div class="col-xs-5"> <input type="text" class="form-control" id="inputPaczkoLata" placeholder="paczkolata" title="paczkolata" name="interview[cigarettesPacksPerYear]" required data-bv-numeric="true"> </div>';
      $(this).closest('.form-group').append($form);
      $('#inputPaczkoLata').tooltip({
        placement: 'right'
      });
      return $('#someCreator').bootstrapValidator('addField', $('#inputPaczkoLata')).bootstrapValidator('revalidateField', 'interview[cigarettesPacksPerYear]');
    } else if ($(this).val() !== 'ACTIVE_SMOKING' && $exists) {
      $('#someCreator').bootstrapValidator('removeField', $('#inputPaczkoLata'));
      return $('#inputPaczkoLata').closest('div').remove();
    }
  });
  add_event('ifChecked ifUnchecked', '#inputNiewydolnosc', function($e) {
    if ($e.type === 'ifChecked') {
      $('#inputNyha').attr('disabled', false).closest('div.fluid-row').show();
      $('#someCreator').bootstrapValidator('enableFieldValidators', 'interview[nyhaClass]', $e.type === 'ifChecked');
      return $('#someCreator').bootstrapValidator('revalidateField', 'interview[nyhaClass]');
    }
  });
  add_event('ifChecked', '#inputNiewydolnosc2, #inputNiewydolnosc3', function() {
    $('#someCreator').bootstrapValidator('enableFieldValidators', 'interview[nyhaClass]', false);
    $('#someCreator').bootstrapValidator('revalidateField', 'interview[nyhaClass]');
    $('#inputNyha').attr('disabled', true).closest('div.fluid-row').hide();
    return form_hidden(this);
  });
  drugs_handler = function($this, $e, $name, $id, $new_name, $id_prefix) {
    var $val;
    add_form_after_checkbox('input[name="interview[' + $name + '][]"]', $id, 'interview[' + $new_name + ']', 'OTHER', 'inne leki');
    $val = $($this).val();
    if (($val === 'NONE' || $val === 'DATA_UNAVAILABLE') && $e.type === 'ifChecked') {
      $($this).closest('.col-xs-5').find('input:checked:not([value="' + $val + '"])').icheck('toggle');
      return;
    }
    if ($name === 'drugsBeforeStroke' && $e.type === 'ifChecked' && $val !== 'DATA_UNAVAILABLE' && $val !== 'NONE' && $('#' + $id_prefix + '14').is(':checked')) {
      $('#' + $id_prefix + '14').icheck('toggle');
    }
    if ($e.type === 'ifChecked' && $val !== 'DATA_UNAVAILABLE' && $val !== 'NONE' && $('#' + $id_prefix + '13').is(':checked')) {
      return $('#' + $id_prefix + '13').icheck('toggle');
    }
  };
  add_event('ifChecked ifUnchecked', 'input[name="interview[drugsBeforeStroke][]"]', function($e) {
    drugs_handler(this, $e, 'drugsBeforeStroke', 'inputLekiInne', 'otherDrugsBeforeStroke', 'inputLeki');
    return fix_section_if_valid($(this));
  });
  add_event('ifChecked ifUnchecked', 'input[name="interview[drugsOnHospitalisation][]"]', function($e) {
    drugs_handler(this, $e, 'drugsOnHospitalisation', 'inputLekiSzpitalInne', 'otherDrugsOnHospitalisation', 'inputLekiSzpital');
    return fix_section_if_valid($(this));
  });
  return add_event('ifChecked ifUnchecked', 'input[name="interview[drugsOnDischarge][]"]', function($e) {
    drugs_handler(this, $e, 'drugsOnDischarge', 'inputLekiWypisInne', 'otherDrugsOnDischarge', 'inputLekiWypis');
    return fix_section_if_valid($(this));
  });
};

observation_page_handler = function($data) {
  var $date_after;
  $('span#patient-name').html($data.firstName + ' ' + $data.surname);
  $('#inputDateOfDeath, #inputApproximateDateOfDeath').closest('div.form-group').hide();
  add_event('ifChecked', 'input[name="interview[finalPatientsState]"]', function() {
    var $el, $show;
    $show = $(this).val() === 'DIED_IN_HOSPITAL' || $(this).val() === 'DIED_IN_6_MONTHS';
    $el = ($(this).val() === 'DIED_IN_HOSPITAL' ? $('#inputDateOfDeath') : $('#inputApproximateDateOfDeath')).closest('div.form-group');
    if ($show) {
      $el.show();
      $('#observationForm').bootstrapValidator('revalidateField', ($(this).val() === 'DIED_IN_HOSPITAL' ? 'interview[dateOfDeath]' : 'interview[approximateDateOfDeath]'));
      return ($(this).val() === 'DIED_IN_HOSPITAL' ? $('#inputApproximateDateOfDeath') : $('#inputDateOfDeath')).val('').closest('div.form-group').hide();
    } else {
      return $('#inputDateOfDeath, #inputApproximateDateOfDeath').val('').closest('div.form-group').hide();
    }
  });
  add_event('click', '#observationForm #submit-button', function() {
    var $form;
    $form = $('#observationForm').serializeJSON();
    $form['interview']['dateOfFinalStateEstablishment'] = moment().valueOf();
    write_data('put', 'patients/' + $data.id, JSON.stringify($form));
    if ($prev_tab !== null) {
      return $('a[href="' + $prev_tab + '"]').trigger('click');
    } else {
      return $('li.login:first a').trigger('click');
    }
  });
  if ($data.interview != null) {
    $date_after = $data['interview']['arrivalDate'] != null ? $data['interview']['arrivalDate'] : ($data['interview']['strokeDate'] != null ? $data['interview']['strokeDate'] : null);
  } else {
    $date_after = null;
  }
  return Lazy([1]).async().each(function() {
    $('#observationForm').bootstrapValidator({
      feedbackIcons: $feedbackIcons,
      fields: {
        'interview[finalPatientsState]': {
          validators: {
            notEmpty: {}
          }
        },
        'interview[approximateDateOfDeath]': {
          validators: {
            callback: {
              callback: function($value) {
                if ($value.match(/\d{1,2}\-\d{1,2}\-\d{1,2}/) === null) {
                  return true;
                }
                if (moment($value).isAfter()) {
                  return {
                    valid: false,
                    message: 'Wprowadzono datę z przyszłości'
                  };
                }
                if ($date_after !== null && moment($value).isBefore($date_after)) {
                  return {
                    valid: false,
                    message: 'Data zgonu jest zbyt wczesna względem daty przyjęcia do szpitala'
                  };
                }
                return true;
              }
            }
          }
        },
        'interview[dateOfDeath]': {
          validators: {
            notEmpty: {},
            date: {
              format: 'YYYY-MM-DD'
            },
            callback: {
              callback: function($value) {
                var $timestamp;
                if ($value.match(/\d{1,2}\-\d{1,2}\-\d{1,2}/) === null) {
                  return true;
                }
                $timestamp = date_to_timestamp($value);
                if (moment($value).isAfter()) {
                  return {
                    valid: false,
                    message: 'Wprowadzono datę z przyszłości'
                  };
                }
                if ($date_after !== null && moment($value).isBefore($date_after)) {
                  return {
                    valid: false,
                    message: 'Data zgonu jest zbyt wczesna względem daty przyjęcia do szpitala'
                  };
                }
                return true;
              }
            }
          }
        }
      }
    }).on('success.field.bv', function($e, $data) {
      var $parent;
      $parent = $data.element.parents('.form-group');
      return $parent.removeClass('has-success');
    }).on('success.form.bv', function($e) {
      $e.preventDefault();
      return $('#observationForm').find('#submit-button').prop('disabled', false);
    });
    $('#observationForm').find('#submit-button').prop('disabled', false);
    if ($data.interview != null) {
      $('input[name="interview[finalPatientsState]"][value="' + $data.interview.finalPatientsState + '"]').icheck('toggle');
      $('#inputFinalStateNote').attr('value', $data.interview.finalStateNote);
      if ($data.interview.finalPatientsState === 'DIED_IN_HOSPITAL') {
        $('#inputDateOfDeath').closest('div.form-group').show();
        if ($data.interview.dateOfDeath != null) {
          $('#inputDateOfDeath').attr('value', timestamp_to_date($data.interview.dateOfDeath));
        }
      } else if ($data.interview.finalPatientsState === 'DIED_IN_6_MONTHS') {
        $('#inputApproximateDateOfDeath').closest('div.form-group').show();
        if ($data.interview.approximateDateOfDeath != null) {
          $('#inputApproximateDateOfDeath').attr('value', $data.interview.approximateDateOfDeath);
        }
      }
    }
    return $('#observationForm').bootstrapValidator('resetForm').bootstrapValidator('validate');
  });
};

$.base64.utf8encode = true;

$(function() {
  var $datatables_lang, error;
  requirejs(['workers/common']);
  $('body').popover({
    placement: 'left',
    selector: '.examination-notes',
    html: true,
    trigger: 'hover',
    content: function() {
      return $(this).html();
    }
  });
  try {
    $datatables_lang = read_json('/ipmed/media/js/vendor/dataTables.json');
  } catch (error) {
    null;
  }
  comet([auto_logout], null, 1);
  $(document).on('click keypress', function($event) {
    if ($event.hasOwnProperty('originalEvent') && !$logout_info) {
      return $last_activity = moment().unix();
    }
  });
  $('a.navbar-brand').click(function($e) {
    $e.preventDefault();
    return bootbox.alert('<h3 class="heading text-center">Projekt IPMed - Informacje</h3> <h4>Aplikacja internetowa stworzona w technologiach:</h4> <ul> <li>Java EE/Spring</li> <li>CoffeScript/jQuery</li> <li>HTML 5/Bootstrap</li> <li>Perl/.bat do ułatwienia startu serwera</li> </ul> <h4>Trochę statystyk:</h4> <ul> <li>Ilość commitów wg. GIT-a: 39</li> <li>CoffeScript: ~1,5k LoC / 74 kB</li> <li>JavaScript: ~1,9k LoC / 76 kB</li> <li>HTML: ~1,5k LoC / 70 kB</li> <li>JEE/Spring: ~100 LoC / 4 kB ;)</li> <li>Kod obsługi ankiety: 420 LoC CoffeScript (27%) + 1270 LoC HTML (85%)</li> <li>Po 4h działania: ~460 requestów/13,9 MB przy ~250 pomiarach</li> </ul> <p>Testowane w przeglądarkach: Mozilla Firefox 35 / Google Chrome 39 / kIEpski 11 (Windows 8.1 Pro)</p> <p>Minimalna szerokość ekranu: 768 px</p>');
  });
  $('#login-page').bootstrapValidator({
    feedbackIcons: $feedbackIcons,
    fields: {
      login: {
        validators: {
          notEmpty: {
            message: 'Login nie może być pusty'
          }
        }
      },
      passwd: {
        validators: {
          notEmpty: {
            message: 'Hasło nie może być puste'
          },
          stringLength: {
            min: 3,
            message: 'Hasło nie może być krótsze niż 3 znaki'
          }
        }
      }
    }
  }).on('success.form.bv', (function(_this) {
    return function($e) {
      var $can_login;
      $e.preventDefault();
      $('#ajaxOverlay').fadeIn(100);
      $can_login = write_with_status('POST', 'trylogin', JSON.stringify([$('#login').val(), $('#passwd').val()]));
      if ($can_login.status !== 204) {
        $username = null;
        show_login_error($can_login.status);
        return;
      }
      $other_user_logout = false;
      $auth_data = $.base64.encode($('#login').val() + ":" + $('#passwd').val());
      $.ajaxSetup({
        headers: {
          "Authorization": "Basic " + $auth_data
        }
      });
      $username = read_with_status('support/myname');
      if ($username.status !== 200) {
        $auth_data = '';
        $.ajaxSetup({
          headers: {
            "Authorization": ''
          }
        });
        show_login_error($username.status);
        $username = null;
        return;
      }
      $('#login, #passwd').val('');
      $('#username').html($username = $username.text);
      $('li.login:first a').trigger('click');
      $($e.target).closest('div.row').hide().next().show();
      $('li.login').show();
      return comet([measurements_updater, examinations_updater], $auth_data, $updaters_refresh_after);
    };
  })(this)).on('success.field.bv', function($e, $data) {
    var $parent;
    $parent = $data.element.parents('.form-group');
    return $parent.removeClass('has-success');
  });
  $(window).unload(function() {
    return logout;
  });
  $('a[href="#logout"]').bind('click', logout);
  return $(document).on('click', 'li.login a, a.move-to', function($event) {
    var $href, $tmp, $tmps, $uri;
    $event.preventDefault();
    $href = $(this).attr('href');
    if ($href === '#logout' || $(this).hasClass('dropdown-toggle')) {
      return;
    }
    show_overlay();
    $tmps = [];
    while ($event_handlers.length > 0) {
      $tmp = $event_handlers.pop();
      if ($tmp.page == null) {
        $(document).off($tmp.event, $tmp.selector);
      } else {
        $tmps.push($tmp);
      }
    }
    $event_handlers = $tmps;
    add_event('click', 'a[href="#go-back"]', function() {
      return $('a[href="' + $prev_tab + '"]').trigger('click');
    });
    $uri = route_uri($href);
    return ajax_request($uri, null, (function(_this) {
      return function($data) {
        console.time("ajax handler");
        if ($href.indexOf('/') !== -1) {
          $('#page-logged-in-content').html($data.html);
        } else {
          $($href + '-div').html($data.html);
        }
        $('.selectpicker').selectpicker();
        if ($since[$href] != null) {
          $since[$href] = moment().valueOf();
        }
        $new_measurements_opened = false;
        switch ($href) {
          case '#new-measurements':
          case '#all-measurements':
            $data = fix_measurements(Lazy($data.data));
            if ($(_this).attr('href') === '#new-measurements') {
              $data = $data.filter(function($v) {
                return $v.patient == null;
              });
              $new_measurements_opened = true;
            }
            measurements_page_handler($data, $href);
            break;
          case '#to-fill':
          case '#all-examinations':
            $data = Lazy(map_examinations($data.data)).filter(function($v) {
              return typeof $v === "object";
            });
            if ($(_this).attr('href') === '#to-fill') {
              $data = $data.filter(function($v) {
                return $v.to_complete;
              });
            }
            examinations_page_handler($data, $href);
            break;
          case '#phones':
            examinations_page_handler(Lazy(phones_filter($data.data)), $href);
        }
        if ($href.lastIndexOf('#patients/ankieta') === 0) {
          interview_page_handler($data.data);
        } else if ($(_this).attr('href').lastIndexOf('#patients/observation') === 0) {
          observation_page_handler($data.data);
        }
        if ($href.indexOf('/') === -1) {
          $('#subpages-content > div:not(' + $href + '-div):not(' + $href + '-div-tmp), #page-logged-in-content').empty().hide();
          $($href + '-div').show();
        } else {
          $('#page-logged-in-content').show();
          $('#subpages-content > div').empty().hide();
        }
        $('.login').removeClass('active');
        $(_this).parent().addClass('active');
        $prev_tab = $curr_tab;
        $curr_tab = $href;
        $('div.date').datetimepicker($datepicker_settings).on('dp.change dp.show', function() {
          return $(this).closest('form').bootstrapValidator('revalidateField', $(this).find('input').attr('name'));
        });
        $(document).on('change', '.selectpicker', function() {
          var error1;
          try {
            return $(this).closest('form').bootstrapValidator('revalidateField', $(this).attr('name'));
          } catch (error1) {
            return null;
          }
        });
        $('table:not(.dataTable):not(#do-uzupelnienia):visible').DataTable({
          paging: false,
          autoWidth: false,
          language: $datatables_lang,
          order: [0, 'desc']
        });
        $('input').icheck('destroy').icheck({
          checkboxClass: "icheckbox_minimal",
          radioClass: "iradio_minimal"
        });
        $('form').data('bootstrapValidator').resetForm();
        $('form').trigger("reset");
        console.timeEnd("ajax handler");
        if (($curr_tab == null) || $curr_tab.lastIndexOf('#patients/ankieta') !== 0) {
          return $('#ajaxOverlay').fadeOut(100);
        }
      };
    })(this));
  });
});

//# sourceMappingURL=scripts.js.map
